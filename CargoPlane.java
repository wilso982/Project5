import java.util.ArrayList;


/**
 * <h1>CargoPlane</h1> Represents a Cargo Plane
 */
public class CargoPlane extends Vehicle {
    final double GAS_RATE = 2.33;

    /**
     * Default Constructor
     */
    //============================================================================
    public CargoPlane() {
        super();
    }
    
    //============================================================================

    /**
     * Constructor
     *
     * @param licensePlate license plate of vehicle
     * @param maxWeight    maximum weight that the vehicle can hold
     */
    //============================================================================
    public CargoPlane(String licensePlate, double maxWeight) {
        super(licensePlate, maxWeight); //not sure
    }
    
    //============================================================================

    /**
     * Overides its superclass method. Instead, after each iteration, the range will
     * increase by 10.
     *
     * @param warehousePackages List of packages to add from
     */
    @Override
    public void fill(ArrayList<Package> warehousePackages) {
        for (int i = 0; isFull(); i+=10) {
            for (int j = 0; j < warehousePackages.size(); j++) {
                int distance = Math.abs(warehousePackages.get(j).getDestination().getZipCode() - getZipDest());
                if (distance == i) {
                    addPackage(warehousePackages.get(j));
                }
            }
        }
    }

    /*
     * =============================================================================
     * | Methods from Profitable Interface
     * =============================================================================
     */

    /**
     * Returns the profits generated by the packages currently in the Cargo Plane.
     * <p>
     * &sum;p<sub>price</sub> - (range<sub>max</sub> &times; 2.33)
     * </p>
     */
    @Override
    public double getProfit() {
        double profit = 0;
        if (super.getPackages() == null) {
            return profit;
        }
        for (Package pkg : super.getPackages()) {
            profit = profit + pkg.getPrice() - (getMaxRange(getPackages()) * GAS_RATE);
        }
        return profit;
    }

    /**
     * Generates a String of the Cargo Plane report. Cargo plane report includes:
     * <ul>
     * <li>License Plate No.</li>
     * <li>Destination</li>
     * <li>Current Weight/Maximum Weight</li>
     * <li>Net Profit</li>
     * <li>Shipping labels of all packages in cargo plane</li>
     * </ul>
     *
     * @return Cargo Plane Report
     */
    @Override
    public String report() {
        String firstPart = String.format(
                "==========Cargo Plane Report========== \n" +
                        "License Plate No.: %s \n" +
                        "Destination: %d \n" +
                        "Weight Load: %.2f/%.2f \n" +
                        "Net Profit: $%.2f \n" +
                        "=====Shipping Labels===== \n",
                getLicensePlate(), getZipDest(), getCurrentWeight(), getMaxWeight(), getProfit());
        String secondPart = "";
        if (super.getPackages() != null) {
            for (Package pkg : getPackages()) {
                secondPart += pkg.shippingLabel() + "\n";
            }
        }
        String lastPart = "==============================";
        return firstPart + secondPart + lastPart;
    }

   
   
}